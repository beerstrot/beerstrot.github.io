{
  "name": "grunt-svg-sprite",
  "version": "0.3.2",
  "author": {
    "name": "Joschi Kuphal",
    "email": "joschi@kuphal.net",
    "url": "http://jkphl.is"
  },
  "description": "Takes a folder of SVG images and creates an SVG sprite along with suitable CSS / Sass / LESS / Stylus etc. resources out of them",
  "homepage": "https://github.com/jkphl/grunt-svg-sprite",
  "repository": {
    "type": "git",
    "url": "https://github.com/jkphl/grunt-svg-sprite.git"
  },
  "bugs": {
    "url": "https://github.com/jkphl/grunt-svg-sprite/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jkphl/grunt-svg-sprite/blob/master/LICENSE.txt"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "svg-sprite": "~0.3.2",
    "chalk": "0.3.x"
  },
  "devDependencies": {
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-jshint": "~0.2.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.2",
    "jshint-stylish": "~0.1.3",
    "load-grunt-tasks": "~0.2.0",
    "svg2png": ">= 1.0.1",
    "image-diff": ">= 0.3.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.2"
  },
  "scripts": {
    "test": "grunt test"
  },
  "keywords": [
    "gruntplugin",
    "icon",
    "icons",
    "svg",
    "png",
    "sprite",
    "generator",
    "css",
    "sass",
    "less",
    "stylus",
    "stylesheet",
    "inline",
    "html",
    "vector",
    "rwd",
    "retina",
    "mustache"
  ],
  "readme": "# grunt-svg-sprite\n\nTakes a folder of SVG images and creates an SVG sprite along with suitable stylesheet resources (e.g. CSS, Sass or LESS) out of them. It is a Grunt plugin that wraps around the [svg-sprite](https://npmjs.org/package/svg-sprite) Node.js module.\n\n## Getting Started\nThis plugin requires Grunt.\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```bash\nnpm install grunt-svg-sprite --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```javascript\ngrunt.loadNpmTasks('grunt-svg-sprite');\n```\n\n## The \"svgsprite\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `svgsprite` to the data object passed into `grunt.initConfig()`.\n\n```javascript\ngrunt.initConfig({\n  svgsprite: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\nOf course, the top level `options` object is optional and you may define as many targets as you want. Your targets should look like this:\n\n```javascript\nyour_target: {\n  src      : ['path/to/svg/image/dir'],\n  dest     : 'path/to/main/output/dir'\n}\n```\n\nAs [svg-sprite](https://github.com/jkphl/svg-sprite) accepts exactly **one input directory** for each run, only the first element of the `src` resource list will be used. That said, you may also provide a simple string as `src` argument: \n\n```javascript\nyour_target: {\n  src      : 'path/to/svg/image/dir',\n  dest     : 'path/to/main/output/dir'\n}\n```\n\n### Options\n\nYou may provide both task and target specific `options`:\n\n```javascript\nyour_target: {\n  src      : 'path/to/svg/dir',\n  dest     : 'path/to/css/dir',\n\n  // Target specific options  \n  options  : {\n    dims   : true,\n    keep   : true\n  }\n}\n```\n\nThe options are passed to [svg-sprite](https://github.com/jkphl/svg-sprite) as configuration values. A complete reference is [available here](https://github.com/jkphl/svg-sprite#available-options).\n\n|Option       |Description  |\n|:------------|:------------|\n|render       |Rendering configuration (output formats like CSS, Sass, LESS, HTML with inline SVG, etc.; [details see here](https://github.com/jkphl/svg-sprite#rendering-configuration))|\n|spritedir    |Sprite subdirectory name [`\"svg\"`]|\n|sprite       |Sprite file name [`\"sprite\"`]|\n|prefix       |CSS selector prefix [`\"svg\"`]|\n|common       |Common CSS selector for all images [*empty*]|\n|maxwidth     |Maximum single image width [`1000`]|\n|maxheight    |Maximum single image height [`1000`]|\n|padding      |Transparent padding around the single images (in pixel) [`0`]|\n|layout       |Image arrangement within the sprite (`\"vertical\"`, `\"horizontal\"` or `\"diagonal\"`) [`\"vertical\"`]|\n|pseudo       |Character sequence for denoting CSS pseudo classes [`\"~\"`]|\n|dims         |Render image dimensions as separate CSS rules [`false`]|\n|keep         |Keep intermediate SVG files (inside the sprite subdirectory) [`false`]|\n|recursive    |Recursive scan of the input directory for SVG files [`false`]|\n|verbose      | Output verbose progress information (0-3) [`0`]|\n|cleanwith    |Module to be used for SVG cleaning. Currently \"scour\" or \"svgo\" [`\"svgo\"`]|\n|cleanconfig  |Configuration options for the cleaning module [`{}`]|\n\n### Usage Examples\n\n#### Basic example\nIn this very basic example, the default options are used to create an SVG sprite along with a suitable CSS file (the `render.css` option defaults to `TRUE`):\n\n```javascript\ngrunt.initConfig({\n  svgsprite: {\n    spriteCSS: {\n      src: ['path/to/svg/dir'],\n      dest: 'path/to/css/dir'\n    }\n  }\n})\n```\n\nThese files are created at `path/to/css/dir`:\n\n```bash\n|-- sprite.css\n`-- svg\n    `-- sprite.svg\n```\n\n#### Sass example\nIn this slightly more verbose example, custom options are used to disable CSS output and create Sass resources instead. Also, the images will be downscaled to 50 x 50 pixel (if necessary) and padded by 10 pixels before creating the SVG sprite. Finally, CSS rules specifying the image dimensions will be added and the optimized, intermediate SVG images used for creating the sprite won't be discarded.\n\n```javascript\ngrunt.initConfig({\n  svgsprite       : {\n    spriteSass    : {\n      src         : ['path/to/svg/dir'],\n      dest        : 'path/to/css/dir',\n      options     : {\n        render    : {\n          css     : false,\n          scss    : {\n            dest  : 'sass/_sprite'\n          }\n        },\n        maxwidth  : 50,\n        maxheight : 50,\n        padding   : 10,\n        keep      : true,\n        dims      : true\n      }\n    }\n  }\n})\n```\n\nThese files are created at `path/to/css/dir` (when run with the example SVG images coming with *grunt-svg-sprite*):\n\n```bash\n|-- sass\n|   `-- _sprite.scss\n`-- svg\n    |-- sprite.svg\n    |-- weather-clear-night.svg\n    |-- weather-clear.svg\n    |-- weather-few-clouds-night.svg\n    |-- weather-few-clouds.svg\n    |-- weather-overcast.svg\n    |-- weather-severe-alert.svg\n    |-- weather-showers-scattered.svg\n    |-- weather-showers.svg\n    |-- weather-snow.svg\n    |-- weather-storm.svg\n    `-- weather-storm~hover.svg\n```\n\n#### Custom output formats & inline SVG embedding\n\nThe output rendering of *grunt-svg-sprite* is based on [Mustache](http://mustache.github.io) templates, which enables **full customization of the generated results**. You can even introduce completely new output formats. For details please see the [svg-sprite documentation](https://github.com/jkphl/svg-sprite#custom-output-formats).\n\nAlso, you may use *grunt-svg-sprite* to create an **inline SVG sprite** that can be embedded directly into your HTML documents. Please see the [svg-sprite documentation](https://github.com/jkphl/svg-sprite#inline-embedding) for details.\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\nRelease history\n---------------\n\n#### v0.3.2\n*\t[Compatibility release](https://github.com/jkphl/svg-sprite#v032)\n*\tAdded a Stylus output template\n\n#### v0.3.1\n*\t[Compatibility release](https://github.com/jkphl/svg-sprite#v031)\n*\tDocumentation corrections\n\n#### v0.3.0\n*\t[Compatibility release](https://github.com/jkphl/svg-sprite#v030)\n*\tFixed bug with SVGO plugin configuration ([#13](https://github.com/jkphl/grunt-svg-sprite/issues/13))\n*\tAdded new HTML output format for rendering an inline SVG HTML implementation ([#12](https://github.com/jkphl/grunt-svg-sprite/issues/12))\n*\tAdded new SVG output format for rendering an inline SVG sprite ([#12](https://github.com/jkphl/grunt-svg-sprite/issues/12))\n*\tDocumentation corrections\n\n#### v0.2.0\n*\tCompatibility release\n*\tFixed tests after fixing the [padding bug in svg-sprite](https://github.com/jkphl/svg-sprite/pull/10)\n\n#### v0.1.5\n*\tCompatibility release\n\n#### v0.1.4\n*\tCompatibility release\n\n#### v0.1.3\n*\tCompatibility release\n\n#### v0.1.2\n*\tCompatibility release\n\n#### v0.1.0\n*\tAdded support for omitting the sprite subdirectory ([svg-sprite issue #5](https://github.com/jkphl/svg-sprite/issues/5))\n*\tAdded support for Mustache template based rendering ([svg-sprite issue #6](https://github.com/jkphl/svg-sprite/issues/6))\n*\t**Breaking change**: Dropped `css`, `sass`, `sassout`, `less` and `lessout` configuration options and added `render` instead (see the [svg-sprite documentation](https://github.com/jkphl/svg-sprite#rendering-configuration) for a description of the available options)\n\n#### v0.0.5\n*\tAdded support for LESS output ([#6](https://github.com/jkphl/grunt-svg-sprite/issues/6))\n\n#### v0.0.4\n*\tUpdated dependency to bugfixed svg-sprite ([#3](https://github.com/jkphl/grunt-svg-sprite/issues/3))\n\n#### v0.0.3\n*\tUpdated dependency to bugfixed svg-sprite ([#2](https://github.com/jkphl/grunt-svg-sprite/issues/2))\n\n#### v0.0.2\n*\tChanged devDependencies\n\n#### v0.0.1\n*\tInitial release\n\n##Legal\nCopyright © 2014 Joschi Kuphal <joschi@kuphal.net> / [@jkphl](https://twitter.com/jkphl)\n\n*grunt-svg-sprite* is licensed under the terms of the [MIT license](LICENSE.txt).\n\nThe contained example SVG icons are part of the [Tango Icon Library](http://tango.freedesktop.org/Tango_Icon_Library) and belong to the Public Domain.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-svg-sprite@0.3.2",
  "_from": "grunt-svg-sprite@"
}
